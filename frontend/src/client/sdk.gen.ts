// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { IdentityEvalGetIdentityEvalsData, IdentityEvalGetIdentityEvalsResponse, IdentityEvalGetChartDataData, IdentityEvalGetChartDataResponse, IdentityEvalModelGetAllModelsResponse, IdentityEvalModelCreateModelData, IdentityEvalModelCreateModelResponse, IdentityEvalModelGetModelData, IdentityEvalModelGetModelResponse, IdentityEvalModelUpdateModelData, IdentityEvalModelUpdateModelResponse, IdentityEvalModelDeleteModelData, IdentityEvalModelDeleteModelResponse, IdentityEvalModelUpdateDatasetKeysData, IdentityEvalModelUpdateDatasetKeysResponse, ItemsReadItemsData, ItemsReadItemsResponse, ItemsCreateItemData, ItemsCreateItemResponse, ItemsReadItemData, ItemsReadItemResponse, ItemsUpdateItemData, ItemsUpdateItemResponse, ItemsDeleteItemData, ItemsDeleteItemResponse, LoginLoginAccessTokenData, LoginLoginAccessTokenResponse, LoginTestTokenResponse, LoginRecoverPasswordData, LoginRecoverPasswordResponse, LoginResetPasswordData, LoginResetPasswordResponse, LoginRecoverPasswordHtmlContentData, LoginRecoverPasswordHtmlContentResponse, SchedulerGetAllJobsResponse, SchedulerPauseJobData, SchedulerPauseJobResponse, SchedulerResumeJobData, SchedulerResumeJobResponse, SchedulerRunJobNowData, SchedulerRunJobNowResponse, UsersReadUsersData, UsersReadUsersResponse, UsersCreateUserData, UsersCreateUserResponse, UsersReadUserMeResponse, UsersDeleteUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeResponse, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponse, UsersRegisterUserData, UsersRegisterUserResponse, UsersReadUserByIdData, UsersReadUserByIdResponse, UsersUpdateUserData, UsersUpdateUserResponse, UsersDeleteUserData, UsersDeleteUserResponse, UtilsTestEmailData, UtilsTestEmailResponse, UtilsHealthCheckResponse, WebhookAlertingData, WebhookAlertingResponse } from './types.gen';

export class IdentityEvalService {
    /**
     * Get Identity Evals
     * 获取身份评估数据，支持按日期范围和其他字段过滤
     * @param data The data for the request.
     * @param data.startDate 开始日期，格式：YYYY-MM-DD
     * @param data.endDate 结束日期，格式：YYYY-MM-DD
     * @param data.aiModelId
     * @param data.datasetName
     * @param data.datasetKey
     * @param data.subset
     * @param data.metric
     * @returns IdentityEvalsPublic Successful Response
     * @throws ApiError
     */
    public static getIdentityEvals(data: IdentityEvalGetIdentityEvalsData = {}): CancelablePromise<IdentityEvalGetIdentityEvalsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/identity-eval/',
            query: {
                start_date: data.startDate,
                end_date: data.endDate,
                ai_model_id: data.aiModelId,
                dataset_name: data.datasetName,
                dataset_key: data.datasetKey,
                subset: data.subset,
                metric: data.metric
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Chart Data
     * 获取用于图表展示的数据，按ai_model_id分组
     * @param data The data for the request.
     * @param data.startDate 开始日期，格式：YYYY-MM-DD
     * @param data.endDate 结束日期，格式：YYYY-MM-DD
     * @param data.datasetName
     * @param data.datasetKey
     * @param data.subset
     * @param data.metric
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getChartData(data: IdentityEvalGetChartDataData = {}): CancelablePromise<IdentityEvalGetChartDataResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/identity-eval/chart-data',
            query: {
                start_date: data.startDate,
                end_date: data.endDate,
                dataset_name: data.datasetName,
                dataset_key: data.datasetKey,
                subset: data.subset,
                metric: data.metric
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class IdentityEvalModelService {
    /**
     * Get All Models
     * 获取所有模型记录
     * @returns IdentityEvalModel Successful Response
     * @throws ApiError
     */
    public static getAllModels(): CancelablePromise<IdentityEvalModelGetAllModelsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/identity-eval-model/'
        });
    }
    
    /**
     * Create Model
     * 创建新的模型记录
     * @param data The data for the request.
     * @param data.requestBody
     * @returns IdentityEvalModel Successful Response
     * @throws ApiError
     */
    public static createModel(data: IdentityEvalModelCreateModelData): CancelablePromise<IdentityEvalModelCreateModelResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/identity-eval-model/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Model
     * 获取指定ID的模型记录
     * @param data The data for the request.
     * @param data.aiModelId
     * @returns IdentityEvalModel Successful Response
     * @throws ApiError
     */
    public static getModel(data: IdentityEvalModelGetModelData): CancelablePromise<IdentityEvalModelGetModelResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/identity-eval-model/{ai_model_id}',
            path: {
                ai_model_id: data.aiModelId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Model
     * 更新模型记录
     * @param data The data for the request.
     * @param data.aiModelId
     * @param data.requestBody
     * @returns IdentityEvalModel Successful Response
     * @throws ApiError
     */
    public static updateModel(data: IdentityEvalModelUpdateModelData): CancelablePromise<IdentityEvalModelUpdateModelResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/identity-eval-model/{ai_model_id}',
            path: {
                ai_model_id: data.aiModelId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Model
     * 删除模型记录
     * @param data The data for the request.
     * @param data.aiModelId
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteModel(data: IdentityEvalModelDeleteModelData): CancelablePromise<IdentityEvalModelDeleteModelResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/identity-eval-model/{ai_model_id}',
            path: {
                ai_model_id: data.aiModelId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Dataset Keys
     * 更新模型的数据集键列表
     * @param data The data for the request.
     * @param data.aiModelId
     * @param data.requestBody
     * @returns IdentityEvalModel Successful Response
     * @throws ApiError
     */
    public static updateDatasetKeys(data: IdentityEvalModelUpdateDatasetKeysData): CancelablePromise<IdentityEvalModelUpdateDatasetKeysResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/identity-eval-model/{ai_model_id}/dataset-keys',
            path: {
                ai_model_id: data.aiModelId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class ItemsService {
    /**
     * Read Items
     * Retrieve items.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns ItemsPublic Successful Response
     * @throws ApiError
     */
    public static readItems(data: ItemsReadItemsData = {}): CancelablePromise<ItemsReadItemsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Item
     * Create new item.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static createItem(data: ItemsCreateItemData): CancelablePromise<ItemsCreateItemResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/items/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Item
     * Get item by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static readItem(data: ItemsReadItemData): CancelablePromise<ItemsReadItemResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Item
     * Update an item.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static updateItem(data: ItemsUpdateItemData): CancelablePromise<ItemsUpdateItemResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Item
     * Delete an item.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteItem(data: ItemsDeleteItemData): CancelablePromise<ItemsDeleteItemResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class LoginService {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginAccessToken(data: LoginLoginAccessTokenData): CancelablePromise<LoginLoginAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/access-token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Test Token
     * Test access token
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static testToken(): CancelablePromise<LoginTestTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/test-token'
        });
    }
    
    /**
     * Recover Password
     * Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static recoverPassword(data: LoginRecoverPasswordData): CancelablePromise<LoginRecoverPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset Password
     * Reset password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static resetPassword(data: LoginResetPasswordData): CancelablePromise<LoginResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/reset-password/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Recover Password Html Content
     * HTML Content for Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns string Successful Response
     * @throws ApiError
     */
    public static recoverPasswordHtmlContent(data: LoginRecoverPasswordHtmlContentData): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery-html-content/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class SchedulerService {
    /**
     * 获取所有定时任务
     * 获取系统中所有注册的定时任务信息
     * @returns JobInfo Successful Response
     * @throws ApiError
     */
    public static getAllJobs(): CancelablePromise<SchedulerGetAllJobsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/scheduler/jobs'
        });
    }
    
    /**
     * 暂停定时任务
     * 根据任务ID暂停指定的定时任务
     * @param data The data for the request.
     * @param data.jobId
     * @returns void Successful Response
     * @throws ApiError
     */
    public static pauseJob(data: SchedulerPauseJobData): CancelablePromise<SchedulerPauseJobResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/scheduler/jobs/{job_id}/pause',
            path: {
                job_id: data.jobId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * 恢复定时任务
     * 根据任务ID恢复指定的定时任务
     * @param data The data for the request.
     * @param data.jobId
     * @returns void Successful Response
     * @throws ApiError
     */
    public static resumeJob(data: SchedulerResumeJobData): CancelablePromise<SchedulerResumeJobResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/scheduler/jobs/{job_id}/resume',
            path: {
                job_id: data.jobId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * 立即运行定时任务
     * 根据任务ID立即执行指定的定时任务
     * @param data The data for the request.
     * @param data.jobId
     * @returns void Successful Response
     * @throws ApiError
     */
    public static runJobNow(data: SchedulerRunJobNowData): CancelablePromise<SchedulerRunJobNowResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/scheduler/jobs/{job_id}/run',
            path: {
                job_id: data.jobId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UsersService {
    /**
     * Read Users
     * Retrieve users.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UsersPublic Successful Response
     * @throws ApiError
     */
    public static readUsers(data: UsersReadUsersData = {}): CancelablePromise<UsersReadUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User
     * Create new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: UsersCreateUserData): CancelablePromise<UsersCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User Me
     * Get current user.
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Delete User Me
     * Delete own user.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Update User Me
     * Update own user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUserMe(data: UsersUpdateUserMeData): CancelablePromise<UsersUpdateUserMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Password Me
     * Update own password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static updatePasswordMe(data: UsersUpdatePasswordMeData): CancelablePromise<UsersUpdatePasswordMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Register User
     * Create new user without the need to be logged in.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static registerUser(data: UsersRegisterUserData): CancelablePromise<UsersRegisterUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User By Id
     * Get a specific user by id.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserById(data: UsersReadUserByIdData): CancelablePromise<UsersReadUserByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User
     * Update a user.
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUser(data: UsersUpdateUserData): CancelablePromise<UsersUpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user.
     * @param data The data for the request.
     * @param data.userId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUser(data: UsersDeleteUserData): CancelablePromise<UsersDeleteUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UtilsService {
    /**
     * Test Email
     * Test emails.
     * @param data The data for the request.
     * @param data.emailTo
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static testEmail(data: UtilsTestEmailData): CancelablePromise<UtilsTestEmailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/test-email/',
            query: {
                email_to: data.emailTo
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Health Check
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/health-check/'
        });
    }
    
}

export class WebhookService {
    /**
     * Alerting
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static alerting(data: WebhookAlertingData): CancelablePromise<WebhookAlertingResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/webhook/alerting',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}